// Created by Guilherme Fuchs
// www.guifuchs.com
// Roundtrip Color Space Conversion with Optional Matrix Transformation
// Input Color Space: DaVinci Wide Gamut 

DEFINE_UI_PARAMS(p_remove, MatrixRemove, DCTLUI_CHECK_BOX, 0);
DEFINE_UI_PARAMS(p_add, MatrixAdd, DCTLUI_CHECK_BOX, 0);

__DEVICE__ float3 fromDWG (float3 in) {
    float3 out;

    float a = 0.0075;
    float b = 7.0;
    float c = 0.07329248;
    float m = 10.44426855;
    float log_cut = 0.02740668;

    out.x = in.x > log_cut ? _powf(2.0f, (in.x / c) - b) - a : in.x / m;
    out.y = in.y > log_cut ? _powf(2.0f, (in.y / c) - b) - a : in.y / m;
    out.z = in.z > log_cut ? _powf(2.0f, (in.z / c) - b) - a : in.z / m;

    return out;
}

__DEVICE__ float3 toLogC3 (float3 in) {
    float3 out;

    float cut = 0.010591;
    float a = 5.555556;
    float b = 0.052272;
    float c = 0.247190;
    float d = 0.385537;
    float e = 5.367655;
    float f = 0.092809;

    out.x = (in.x > cut) ? c * log10(a * in.x + b) + d: e * in.x + f;
    out.y = (in.y > cut) ? c * log10(a * in.y + b) + d: e * in.y + f;
    out.z = (in.z > cut) ? c * log10(a * in.z + b) + d: e * in.z + f;

    return out;
}

__DEVICE__ float3 fromLogC3 (float3 in) {
    float3 out;

    float cut = 0.010591;
    float a = 5.555556;
    float b = 0.052272;
    float c = 0.247190;
    float d = 0.385537;
    float e = 5.367655;
    float f = 0.092809;

    out.x = (in.x > e * cut + f) ? (_powf(10, (in.x - d) / c) - b) / a : (in.x - f) / e;
    out.y = (in.y > e * cut + f) ? (_powf(10, (in.y - d) / c) - b) / a : (in.y - f) / e;
    out.z = (in.z > e * cut + f) ? (_powf(10, (in.z - d) / c) - b) / a : (in.z - f) / e;

    return out;
}

__DEVICE__ float3 toDWG (float3 in) {
    float3 out;

    float a = 0.0075;
    float b = 7.0;
    float c = 0.07329248;
    float m = 10.44426855;
    float lin_cut = 0.00262409;

    out.x = in.x > lin_cut ? (_log2f(in.x + a) + b) * c : out.x = in.x * m;
    out.y = in.y > lin_cut ? (_log2f(in.y + a) + b) * c : out.y = in.y * m;
    out.z = in.z > lin_cut ? (_log2f(in.z + a) + b) * c : out.z = in.z * m;

    return out;
}


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    
    float3 lin = fromDWG(make_float3(p_R, p_G, p_B));

    
    float3 logC = toLogC3(lin);

    
    float remove_r, remove_g, remove_b;
    float add_r, add_g, add_b;

    
    if (p_remove == 1) {
        remove_r = (logC.x * 0.806165f) + (logC.y * 0.168534f) + (logC.z * 0.025301f);
        remove_g = (logC.x * 0.091228f) + (logC.y * 0.765221f) + (logC.z * 0.14355f);
        remove_b = (logC.x * 0.092241f) + (logC.y * 0.251418f) + (logC.z * 0.656341f);
        logC = make_float3(remove_r, remove_g, remove_b);
    }

    
    if (p_add == 1) {
        add_r = (logC.x * 1.271103f) + (logC.y * -0.284279f) + (logC.z * 0.013176f);
        add_g = (logC.x * -0.127165f) + (logC.y * 1.436429f) + (logC.z * -0.309264f);
        add_b = (logC.x * -0.129927f) + (logC.y * -0.510286f) + (logC.z * 1.640214f);
        logC = make_float3(add_r, add_g, add_b);
    }

    
    lin = fromLogC3(logC);

    
    float3 dwg = toDWG(lin);

    return dwg;
}